
OC基础
1. 为什么说Objective-C是一门动态的语言？
2. 讲一下MVC和MVVM，MVP？
3. 为什么代理要用weak？代理的delegate和dataSource有什么区别？block和代理的区别?
4. 属性的实质是什么？包括哪几个部分？属性默认的关键字都有哪些？@dynamic关键字和@synthesize关键字是用来做什么的？
5. 属性的默认关键字是什么？
6. NSString为什么要用copy关键字，如果用strong会有什么问题？（注意：这里没有说用strong就一定不行。使用copy和strong是看情况而定的）
7. 如何令自己所写的对象具有拷贝功能?
8. 可变集合类 和 不可变集合类的 copy 和 mutablecopy有什么区别？如果是集合是内容复制的话，集合里面的元素也是内容复制么？
9. 为什么IBOutlet修饰的UIView也适用weak关键字？
10. nonatomic和atomic的区别？atomic是绝对的线程安全么？为什么？如果不是，那应该如何实现？
11. UICollectionView自定义layout如何实现？
12. 用StoryBoard开发界面有什么弊端？如何避免？
13. 进程和线程的区别？同步异步的区别？并行和并发的区别？
14. 线程间通信？
15. GCD的一些常用的函数？（group，barrier，信号量，线程同步）
16. 如何使用队列来避免资源抢夺？
17. 数据持久化的几个方案（fmdb用没用过）
18. 说一下AppDelegate的几个方法？从后台到前台调用了哪些方法？第一次启动调用了哪些方法？从前台到后台调用了哪些方法？
19. NSCache优于NSDictionary的几点？
20. 知不知道Designated Initializer？使用它的时候有什么需要注意的问题？
21. 实现description方法能取到什么效果？
22. objc使用什么机制管理对象内存？
中级
Block
1. block的实质是什么？一共有几种block？都是什么情况下生成的？
2. 为什么在默认情况下无法修改被block捕获的变量？ __block都做了什么？
3. 模拟一下循环引用的一个情况？block实现界面反向传值如何实现？
Runtime
1. objc在向一个对象发送消息时，发生了什么？
2. 什么时候会报unrecognized selector错误？iOS有哪些机制来避免走到这一步？
3. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？
4. runtime如何实现weak变量的自动置nil？
5. 给类添加一个属性后，在类结构体里哪些元素会发生变化？
RunLoop
1. runloop是来做什么的？runloop和线程有什么关系？主线程默认开启了runloop么？子线程呢？
2. runloop的mode是用来做什么的？有几种mode？
3. 为什么把NSTimer对象以NSDefaultRunLoopMode（kCFRunLoopDefaultMode）添加到主运行循环以后，滑动scrollview的时候NSTimer却不动了？
4. 苹果是如何实现Autorelease Pool的？
类结构
1. isa指针？（对象的isa，类对象的isa，元类的isa都要说）
2. 类方法和实例方法有什么区别？
类方法只能访问类的成员变量，不能访问实例变量；实例方法不仅可以访问类的成员变量，也可以访问实例变量。
类方法只能调用类方法，而实例方法可以调用类方法跟实例方法
类方法里面的self是class，而实例方法的self是对象的首地址
对于类的成员变量跟实例变量来说，主要看是否创建一个新对象来进行访问

3. 介绍一下分类，能用分类做什么？内部是如何实现的？它为什么会覆盖掉原来的方法？
4. 运行时能增加成员变量么？能增加属性么？如果能，如何增加？如果不能，为什么？
5. objc中向一个nil对象发送消息将会发生什么？（返回值是对象，是标量，结构体）
高级
1. UITableview的优化方法（缓存高度，异步绘制，减少层级，hide，避免离屏渲染）
2. 有没有用过运行时，用它都能做什么？（交换方法，创建类，给新创建的类增加方法，改变isa指针）
3. 看过哪些第三方框架的源码？都是如何实现的？（如果没有，问一下多图下载的设计）
4. SDWebImage的缓存策略？
5. AFN为什么添加一条常驻线程？
6. KVO的使用？实现原理？（为什么要创建子类来实现）
7. KVC的使用？实现原理？（KVC拿到key以后，是如何赋值的？知不知道集合操作符，能不能访问私有属性，能不能直接访问_ivar）
项目
1. 有已经上线的项目么？
2. 项目里哪个部分是你完成的？（找一个亮点问一下如何实现的）
3. 开发过程中遇到过什么困难，是如何解决的？
学习
1. 遇到一个问题完全不能理解的时候，是如何帮助自己理解的？举个例子？
2. 有看书的习惯么？最近看的一本是什么书？有什么心得？
3. 有没有使用一些笔记软件？会在多平台同步以及多渠道采集么？（如果没有，问一下是如何复习知识的）
4. 有没有使用清单类，日历类的软件？（如果没有，问一下是如何安排，计划任务的）
5. 平常看博客么？有没有自己写过？（如果写，有哪些收获？如果没有写，问一下不写的原因）
有关技术类的问题可以在评论区留言，我重点说一下这轮面试的心得和体会。
第二部分：心得

面试者千万不要答非所问
如果让我选一个让面试官觉得印象减分的点，答非所问应该是首当其冲的。
面试者一定要知道面试官问的点是什么。
* 如果在知道面试官问的点，但是自己却不知道答案的时候，可以提出思路，思考过程。其实有几次面试者在我的引导下很容易就把答案说出来了，认清问题的点是解决问题的一半。
* 如果没有理解好面试官问的问题，一定要事先和面试官确认好。
其实这也属于沟通能力的一点：如果不能保证和对方沟通内容的一致性，自己弄个filter把对方的话都曲解了，以后合作的时候又怎能保证沟通好呢？
面试者一定不要来得太早
这里说的来得太早，是来得太早并告知面试官自己已经来了。
因为在约定好的面试时间之前，往往面试官还有别的事情在做，如果他知道你来的很早，就可能会扰乱他的计划。有一位面试者早来了1个小时，结果把我们的面试计划打乱了，而且正好是我的第一次面试，所以真的是有点措手不及。
求职者和公司定下来的时间属于一个约定，约定是要遵守的。而且遵守约定同样也是对对方的尊重。如果入职之前都没能把握好，入职之后又如何能保证把握好呢？
实践与理论的脱节，让人很不安
能做出来项目，但是基础知识很薄弱
几乎每位面试者都能给我展示他做的一些app，虽然没有很难的功能，但也都算是有板有眼。可让我比较意外的是，虽然能做出有模有样的app，但当我问到很多基础的问题的时候却答不上来，比如属性和成员变量的区别，属性的默认关键字，Designated Initializer的概念等等。。
这不禁让我怀疑他们的代码的稳定性，更怀疑他们治学，做技术的态度。
虽说技术活需要实践的磨练，但和理论脱节的技术是钻不深的。可能有人会说我的面试题过于理论，实际中用不到。但有些时候，在实际开发中遇到的一些问题往往就是因为一些很基本的东西没有弄清导致的，相信你我都深有体会。
而且，我们都知道技术的提升是阶梯式的。什么是阶梯式的呢？就是可能我们会有比较长的时间才会有一个突破。但这个突破来的有多快，提升的有多高，是跟平时每个细小知识点的掌握程度是分不开的。
因为知识也是有复利效应的，准确地掌握越多的知识点，在以后的学习过程中，这些知识点相互之间想成的积极作用会越来越大：对新知识的理解更快，对问题的定位会更准，解决问题的方法也会越多。相反，如果你每个问题都得过且过，这些结果的复合作用就会导致你今后很难会有所突破了。
真的可能被简历骗到
上家的薪资很高，但是实际能力很不符
有一位面试者在简历里号称上一个工作拿了15k，但当我问到NSString属性使用strong还是copy作为关键字的时候他却说是strong，甚至连delegate都拿不准使用strong还是weak，我就有些奇怪了。
看技术博客和技术书籍的人还是很少的
只依赖于公司里的项目应该是不够的，毕竟不是每个公司里都有上乘的代码和技术
面试了大概20个人，但是真正有看过技术博客和技术书籍的真的不多，更别提Github了。不过其中一位面试通过者是有github账号的，并且有几个小项目，印象非常好，加了不少分。
我相信在这一行的未来，简历里面github账号和博客绝对会越来越受重视：
* 一方面简历真的是应接不暇，而且同时千篇一律，很难找出亮点。
* 另一方面，如果可以把自己的代码和成长展示给招聘公司，就会使得自己的能力在公司面前变得更加纯粹和透明，更有助于找到适合你自己的公司。
以上就是我上个月的面试心得，希望大家多交流，有说的不对的地方还请多指正。


++++

OC基础

1.	为什么说Objective-C是一门动态的语言？
Objective-C是动态语言，它将很多静态语言在编译和链接时做的事放到了运行时，这个运行时系统就是runtime。
Objective-C 不同于 其他语言,它是动态的。何为动态，就是说它在执行一个方法的时候，比如[object method]并不是去直接执行,而是将method当作一条消息发送,这个消息由object来处理,这个消息可能被转发给另外一个对象。例[object init]调用［super init］或者不予理睬假装没有收到此消息比如给button 添加一个SEL.多条不同的消息也可以对应同一个方法实现。这都是在程序运行的过程时候决定的。
即任何一个元类都是根元类的对象

struct objc_class {
Class isaOBJC_ISA_AVAILABILITY;//isa指针指向Meta Class,因为objc类本身也是一个object（对象）,为了处理这个关系，runtime创造了Meta Class，当一个类发送[NSObject alloc]这样消息时，实际上是把消息发送给Class object类对象
#if !__OBJC2__
Class super_class OBJC2_UNAVAILABLE;//父类
const char *name OBJC2_UNAVAILABLE;//类名
long version OBJC2_UNAVAILABLE;//类的版本信息，默认为0
long info OBJC2_UNAVAILABLE;//类信息，供运行时使用的一些位表示
long instance_size OBJC2_UNAVAILABLE;//该类的实例变量大小
struct objc_ivar_list *ivars OBJC2_UNAVAILABLE;//该类的成员变量的链表
struct objc_method_list **methodLists OBJC2_UNAVAILABLE;//方法定义的链表
struct objc_cache *cache OBJC2_UNAVAILABLE;//方法缓存，对象接到一个消息会根据isa指针查找消息对象，这时会在methodLists中遍历，如果cache了，常用的方法调用时就能够提高调用的效率。

struct objc_protocol_list *protocolsOBJC2_UNAVAILABLE;//协议链表

#endif

} OBJC2_UNAVAILABLE;



2. 讲一下MVC和MVVM，MVP？
3. 为什么代理要用weak？代理的delegate和dataSource有什么区别？block和代理的区别?
4. 属性的实质是什么？包括哪几个部分？属性默认的关键字都有哪些？@dynamic关键字和@synthesize关键字是用来做什么的？
5. 属性的默认关键字是什么？
6. NSString为什么要用copy关键字，如果用strong会有什么问题？（注意：这里没有说用strong就一定不行。使用copy和strong是看情况而定的）
7. 如何令自己所写的对象具有拷贝功能?
8. 可变集合类 和 不可变集合类的 copy 和 mutablecopy有什么区别？如果是集合是内容复制的话，集合里面的元素也是内容复制么？
9. 为什么IBOutlet修饰的UIView也适用weak关键字？
10. nonatomic和atomic的区别？atomic是绝对的线程安全么？为什么？如果不是，那应该如何实现？
11. UICollectionView自定义layout如何实现？
12. 用StoryBoard开发界面有什么弊端？如何避免？
13. 进程和线程的区别？同步异步的区别？并行和并发的区别？
14. 线程间通信？
15. GCD的一些常用的函数？（group，barrier，信号量，线程同步）
16. 如何使用队列来避免资源抢夺？
17. 数据持久化的几个方案（fmdb用没用过）
18. 说一下AppDelegate的几个方法？从后台到前台调用了哪些方法？第一次启动调用了哪些方法？从前台到后台调用了哪些方法？
19. NSCache优于NSDictionary的几点？
20. 知不知道Designated Initializer？使用它的时候有什么需要注意的问题？
21. 实现description方法能取到什么效果？
22. objc使用什么机制管理对象内存？

中级
Block
1. block的实质是什么？一共有几种block？都是什么情况下生成的？
2. 为什么在默认情况下无法修改被block捕获的变量？ __block都做了什么？
3. 模拟一下循环引用的一个情况？block实现界面反向传值如何实现？

Runtime
1. objc在向一个对象发送消息时，发生了什么？
2. 什么时候会报unrecognized selector错误？iOS有哪些机制来避免走到这一步？
3. 能否向编译后得到的类中增加实例变量？能否向运行时创建的类中添加实例变量？为什么？
4. runtime如何实现weak变量的自动置nil？
5. 给类添加一个属性后，在类结构体里哪些元素会发生变化？
RunLoop
1. runloop是来做什么的？runloop和线程有什么关系？主线程默认开启了runloop么？子线程呢？
2. runloop的mode是用来做什么的？有几种mode？
3. 为什么把NSTimer对象以NSDefaultRunLoopMode（kCFRunLoopDefaultMode）添加到主运行循环以后，滑动scrollview的时候NSTimer却不动了？
4. 苹果是如何实现Autorelease Pool的？
runtime：Objective-C是动态语言，它将很多静态语言在编译和链接时做的事放到了运行时，这个运行时系统就是runtime。
runtime其实就是一个库，它基本上是用C和汇编写的一套API，这个库使C语言有了面向对象的能力。
静态语言：在编译的时候会决定调用哪个函数。
动态语言（OC）：在运行的时候根据函数的名称找到对应的函数来调用。
isa：OC中，类和类的实例在本质上没有区别，都是对象，任何对象都有isa指针，它指向类或元类（元类后面会讲解）。
SEL：SEL（选择器）是方法的selector的指针。方法的selector表示运行时方法的名字。OC在编译时，会依据每一个方法的名字、参数，生成一个唯一的整型标识(Int类型的地址)，这个标识就是SEL。
IMP：IMP是一个函数指针，指向方法最终实现的首地址。SEL就是为了查找方法的最终实现IMP。
Method：用于表示类定义中的方法，它的结构体中包含一个SEL和IMP，相当于在SEL和IMP之间作了一个映射。
消息机制：任何方法的调用本质就是发送一个消息。编译器会将消息表达式[receiver message]转化为一个消息函数objc_msgSend(receiver, selector)。
Runtime的使用：获取属性列表，获取成员变量列表，获得方法列表，获取协议列表，方法交换（黑魔法），动态的添加方法，调用私有方法，为分类添加属性。

24. objc中的类方法和实例方法有什么本质区别和联系？
类方法：
1.	类方法是属于类对象的
2.	类方法只能通过类对象调用
3.	类方法中的self是类对象
4.	类方法可以调用其他的类方法
5.	类方法中不能访问成员变量
6.	类方法中不能直接调用对象方法
实例方法：
1.	实例方法是属于实例对象的
2.	实例方法只能通过实例对象调用
3.	实例方法中的self是实例对象
4.	实例方法中可以访问成员变量
5.	实例方法中直接调用实例方法
6.	实例方法中也可以调用类方法(通过类名)
7.	实例方法里面的self，是对象的首地址。
8.	类方法里面的self，是Class.


+（void）function；//类方法，不需要实例化对象就可以调用的方法
- （void）function2 ：（NSString *）arg；//成员方法，必须通过实例化的对象调用

21. 下面的代码输出什么？
   @implementation Son : Father
   - (id)init
   {
       self = [super init];
       if (self) {
           NSLog(@"%@", NSStringFromClass([self class]));
           NSLog(@"%@", NSStringFromClass([super class]));
       }
       return self;
   }
   @end
答案：
都输出 Son
NSStringFromClass([self class]) = Son
NSStringFromClass([super class]) = Son

很多人会想当然的认为“ super 和 self 类似，应该是指向父类的指针吧！”。这是很普遍的一个误区。其实 super 是一个 Magic Keyword， 它本质是一个编译器标示符，和 self 是指向的同一个消息接受者！他们两个的不同点在于：super 会告诉编译器，调用 class 这个方法时，要去父类的方法，而不是本类里的。
我们知道alloc返回一个有效的未初始化的对象实例。对于self是alloc 返回的指针，同时可以在所有的方法作用域内访问。但是对于 super，它只是一个"编译器指示符",告诉编译器在父类中搜索方法的实现。优先调用[super init] 是为了使超类完成它们自己的初始化工作。
那么 if (self = [super init])又是做啥？
这里是担心父类初始化失败，如果初始化一个对象失败，就会返回nil，当返回nil的时候self = [super init]测试的主体就不会再继续执行。如果不这样做，你可能会操作一个不可用的对象，它的行为是不可预测的，最终可能会导致你的程序崩溃。
self表示当前这个类的对象，而super是一个编译器标示符，和self指向同一个消息接受者。在本例中，无论是[self class]还是[super class]，接受消息者都是Son对象，但super与self不同的是，self调用class方法时，是在子类Son中查找方法，而super调用class方法时，是在父类Father中查找方法。
官方文档中self相关解释

Whenever you’re writing a method implementation, you have access to an important hidden value, self. Conceptually, self is a way to refer to “the object that’s received this message.” It’s apointer, just like the greeting value above, and can be used to call a method on the current receiving object.

super解释

There’s anotherimportant keyword available to you in Objective-C, called super. Sending a message to super is a way to call through to a method implementation defined by a superclass further up the inheritance chain. The most common use of super is when overriding a method.
self调用自己方法，super调用父类方法
self是类，super是预编译指令
[self class]和[super class]输出是一样的



类结构
1.	isa指针？（对象的isa，类对象的isa，元类的isa都要说
objc_object:Objective-C对对象的定义, 其质上是结构体对象，其中 isa是它唯一的私有成员变量,即所有对象都有isa指针
每个类的isa指针指向该类的所属类型元类(metaClass)
Class 是一个 objc_class 结构类型的指针
id是一个 objc_object 结构类型的指针,这也是id可以指向任何对象的原因
SEL会依据方法名生成唯一的表示作为key ,便于查找
IMP指针是指向实现函数的指针,通过SEL取得IMP, objc_msgSend来执行实现方法
[isa 指针 和 IMP 指针 - 简书](http://www.jianshu.com/p/626e872d8eed)
任何类的定义都是对象，类和类的实例在本质上没有区别，任何对象都有isa指针


2. 类方法和实例方法有什么区别？
类方法（工厂方法），也称静态方法，指的是用static关键字修饰的方法。此方法属类本身的方法，不属于类的某一个实例（对象）。类方法中不可直接使用实例变量。静态方法在程序开始时生成内存,实例方法在程序运行中生成内存，静态方法可以直接调用,实例方法要先成生实例,通过实例调用方法，静态速度很快，但是多了会占内存。静态内存是连续的,因为是在程序开始时就生成了,而实例申请的是离散的空间,所以当然没有静态方法快，

•	类方法只能调用类方法，而实例方法可以调用类方法跟实例方法
•	类方法里面的self是class，而实例方法的self是对象的首地址
•	类方法只能访问类的成员变量，不能访问实例变量；实例方法不仅可以访问类的成员变量，也可以访问实例变量。
•	static： 类变量，其值为该类的所有对象共享，不会因类的对象不同而不同

2.	介绍一下分类，能用分类做什么？内部是如何实现的？它为什么会覆盖掉原来的方法？


3.	运行时能增加成员变量么？能增加属性么？如果能，如何增加？如果不能，为什么？

5. objc中向一个nil对象发送消息将会发生什么？（返回值是对象，是标量，结构体）
高级
1. UITableview的优化方法（缓存高度，异步绘制，减少层级，hide，避免离屏渲染）
2. 有没有用过运行时，用它都能做什么？（交换方法，创建类，给新创建的类增加方法，改变isa指针）
3. 看过哪些第三方框架的源码？都是如何实现的？（如果没有，问一下多图下载的设计）
4. SDWebImage的缓存策略？
5. AFN为什么添加一条常驻线程？
6. KVO的使用？实现原理？（为什么要创建子类来实现）
7. KVC的使用？实现原理？（KVC拿到key以后，是如何赋值的？知不知道集合操作符，能不能访问私有属性，能不能直接访问_ivar）
8. iOS之NSTimer导致的内存泄露
发现个问题，当我跳到TimeViewController控制器的时候，定时器干活了。当我点击屏幕开始dismissViewController它的时候，发现定时器还在干活。那就是timer没停止。
@property(nonatomic,weak)NSTimer *timer;
self.timer = [NSTimer scheduledTimerWithTimeInterval:1.0 target:self selector:@selector(timeAction:) userInfo:nil repeats:YES];

timer创建成功会被添加到Runloop里，它就被Runloop强引用了。它的target是self。所以它强引用了self。属性那里是weak没事。
当我们想销毁TimeViewController的时候，因为它被timer强引用所以它销毁不了。多会timer死了，它才能死。但是它要是死不了delloc方法不会走。delloc方法走不了timer就死不了。只有执行了[self.timer invalidate]，timer才会死。所以这就是循环引用了。

项目
1. 有已经上线的项目么？
2. 项目里哪个部分是你完成的？（找一个亮点问一下如何实现的）
3. 开发过程中遇到过什么困难，是如何解决的？

学习
1. 遇到一个问题完全不能理解的时候，是如何帮助自己理解的？举个例子？
2. 有看书的习惯么？最近看的一本是什么书？有什么心得？
3. 有没有使用一些笔记软件？会在多平台同步以及多渠道采集么？（如果没有，问一下是如何复习知识的）
4. 有没有使用清单类，日历类的软件？（如果没有，问一下是如何安排，计划任务的）
5. 平常看博客么？有没有自己写过？（如果写，有哪些收获？如果没有写，问一下不写的原因）
有关技术类的问题可以在评论区留言，我重点说一下这轮面试的心得和体会。


==================================================


第二部分：心得

面试者千万不要答非所问
如果让我选一个让面试官觉得印象减分的点，答非所问应该是首当其冲的。
面试者一定要知道面试官问的点是什么。
* 如果在知道面试官问的点，但是自己却不知道答案的时候，可以提出思路，思考过程。其实有几次面试者在我的引导下很容易就把答案说出来了，认清问题的点是解决问题的一半。
* 如果没有理解好面试官问的问题，一定要事先和面试官确认好。
其实这也属于沟通能力的一点：如果不能保证和对方沟通内容的一致性，自己弄个filter把对方的话都曲解了，以后合作的时候又怎能保证沟通好呢？
面试者一定不要来得太早
这里说的来得太早，是来得太早并告知面试官自己已经来了。
因为在约定好的面试时间之前，往往面试官还有别的事情在做，如果他知道你来的很早，就可能会扰乱他的计划。有一位面试者早来了1个小时，结果把我们的面试计划打乱了，而且正好是我的第一次面试，所以真的是有点措手不及。
求职者和公司定下来的时间属于一个约定，约定是要遵守的。而且遵守约定同样也是对对方的尊重。如果入职之前都没能把握好，入职之后又如何能保证把握好呢？
实践与理论的脱节，让人很不安
能做出来项目，但是基础知识很薄弱
几乎每位面试者都能给我展示他做的一些app，虽然没有很难的功能，但也都算是有板有眼。可让我比较意外的是，虽然能做出有模有样的app，但当我问到很多基础的问题的时候却答不上来，比如属性和成员变量的区别，属性的默认关键字，Designated Initializer的概念等等。。
这不禁让我怀疑他们的代码的稳定性，更怀疑他们治学，做技术的态度。
虽说技术活需要实践的磨练，但和理论脱节的技术是钻不深的。可能有人会说我的面试题过于理论，实际中用不到。但有些时候，在实际开发中遇到的一些问题往往就是因为一些很基本的东西没有弄清导致的，相信你我都深有体会。
而且，我们都知道技术的提升是阶梯式的。什么是阶梯式的呢？就是可能我们会有比较长的时间才会有一个突破。但这个突破来的有多快，提升的有多高，是跟平时每个细小知识点的掌握程度是分不开的。
因为知识也是有复利效应的，准确地掌握越多的知识点，在以后的学习过程中，这些知识点相互之间想成的积极作用会越来越大：对新知识的理解更快，对问题的定位会更准，解决问题的方法也会越多。相反，如果你每个问题都得过且过，这些结果的复合作用就会导致你今后很难会有所突破了。
真的可能被简历骗到
上家的薪资很高，但是实际能力很不符
有一位面试者在简历里号称上一个工作拿了15k，但当我问到NSString属性使用strong还是copy作为关键字的时候他却说是strong，甚至连delegate都拿不准使用strong还是weak，我就有些奇怪了。
看技术博客和技术书籍的人还是很少的
只依赖于公司里的项目应该是不够的，毕竟不是每个公司里都有上乘的代码和技术
面试了大概20个人，但是真正有看过技术博客和技术书籍的真的不多，更别提Github了。不过其中一位面试通过者是有github账号的，并且有几个小项目，印象非常好，加了不少分。
我相信在这一行的未来，简历里面github账号和博客绝对会越来越受重视：
* 一方面简历真的是应接不暇，而且同时千篇一律，很难找出亮点。
* 另一方面，如果可以把自己的代码和成长展示给招聘公司，就会使得自己的能力在公司面前变得更加纯粹和透明，更有助于找到适合你自己的公司。
以上就是我上个月的面试心得，希望大家多交流，有说的不对的地方还请多指正。


